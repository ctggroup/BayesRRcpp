// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// sumDiagonal
Eigen::MatrixXd sumDiagonal(Eigen::MatrixXd Ma, Eigen::VectorXd va);
RcppExport SEXP _BayesRRcpp_sumDiagonal(SEXP MaSEXP, SEXP vaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Ma(MaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type va(vaSEXP);
    rcpp_result_gen = Rcpp::wrap(sumDiagonal(Ma, va));
    return rcpp_result_gen;
END_RCPP
}
// mvn_rng
Eigen::MatrixXd mvn_rng(int nn, const Eigen::MatrixXd mean, const Eigen::MatrixXd covar);
RcppExport SEXP _BayesRRcpp_mvn_rng(SEXP nnSEXP, SEXP meanSEXP, SEXP covarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nn(nnSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type covar(covarSEXP);
    rcpp_result_gen = Rcpp::wrap(mvn_rng(nn, mean, covar));
    return rcpp_result_gen;
END_RCPP
}
// mvnCoef_rng
Eigen::MatrixXd mvnCoef_rng(int nn, const Eigen::MatrixXd xty, const Eigen::MatrixXd xtx, const Eigen::VectorXd d);
RcppExport SEXP _BayesRRcpp_mvnCoef_rng(SEXP nnSEXP, SEXP xtySEXP, SEXP xtxSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nn(nnSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type xty(xtySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type xtx(xtxSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(mvnCoef_rng(nn, xty, xtx, d));
    return rcpp_result_gen;
END_RCPP
}
// mvnCoef_rngAug
Eigen::MatrixXd mvnCoef_rngAug(int nn, const Eigen::MatrixXd y, const Eigen::MatrixXd x, const Eigen::VectorXd d);
RcppExport SEXP _BayesRRcpp_mvnCoef_rngAug(SEXP nnSEXP, SEXP ySEXP, SEXP xSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nn(nnSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(mvnCoef_rngAug(nn, y, x, d));
    return rcpp_result_gen;
END_RCPP
}
// RandomG
double RandomG(double shape, double scale);
RcppExport SEXP _BayesRRcpp_RandomG(SEXP shapeSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(RandomG(shape, scale));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesRRcpp_sumDiagonal", (DL_FUNC) &_BayesRRcpp_sumDiagonal, 2},
    {"_BayesRRcpp_mvn_rng", (DL_FUNC) &_BayesRRcpp_mvn_rng, 3},
    {"_BayesRRcpp_mvnCoef_rng", (DL_FUNC) &_BayesRRcpp_mvnCoef_rng, 4},
    {"_BayesRRcpp_mvnCoef_rngAug", (DL_FUNC) &_BayesRRcpp_mvnCoef_rngAug, 4},
    {"_BayesRRcpp_RandomG", (DL_FUNC) &_BayesRRcpp_RandomG, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesRRcpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
