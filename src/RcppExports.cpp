// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// BayesRSamplerSparse
void BayesRSamplerSparse(std::string outputFile, int seed, int max_iterations, int burn_in, int thinning, Eigen::MatrixXd X, Eigen::VectorXd Y, double sigma0, double v0E, double s02E, double v0G, double s02G, int B);
RcppExport SEXP _BayesRRcpp_BayesRSamplerSparse(SEXP outputFileSEXP, SEXP seedSEXP, SEXP max_iterationsSEXP, SEXP burn_inSEXP, SEXP thinningSEXP, SEXP XSEXP, SEXP YSEXP, SEXP sigma0SEXP, SEXP v0ESEXP, SEXP s02ESEXP, SEXP v0GSEXP, SEXP s02GSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type sigma0(sigma0SEXP);
    Rcpp::traits::input_parameter< double >::type v0E(v0ESEXP);
    Rcpp::traits::input_parameter< double >::type s02E(s02ESEXP);
    Rcpp::traits::input_parameter< double >::type v0G(v0GSEXP);
    Rcpp::traits::input_parameter< double >::type s02G(s02GSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    BayesRSamplerSparse(outputFile, seed, max_iterations, burn_in, thinning, X, Y, sigma0, v0E, s02E, v0G, s02G, B);
    return R_NilValue;
END_RCPP
}
// BayesRSamplerV2
void BayesRSamplerV2(std::string outputFile, int seed, int max_iterations, int burn_in, int thinning, Eigen::MatrixXd X, Eigen::VectorXd Y, double sigma0, double v0E, double s02E, double v0G, double s02G, int B);
RcppExport SEXP _BayesRRcpp_BayesRSamplerV2(SEXP outputFileSEXP, SEXP seedSEXP, SEXP max_iterationsSEXP, SEXP burn_inSEXP, SEXP thinningSEXP, SEXP XSEXP, SEXP YSEXP, SEXP sigma0SEXP, SEXP v0ESEXP, SEXP s02ESEXP, SEXP v0GSEXP, SEXP s02GSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type sigma0(sigma0SEXP);
    Rcpp::traits::input_parameter< double >::type v0E(v0ESEXP);
    Rcpp::traits::input_parameter< double >::type s02E(s02ESEXP);
    Rcpp::traits::input_parameter< double >::type v0G(v0GSEXP);
    Rcpp::traits::input_parameter< double >::type s02G(s02GSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    BayesRSamplerV2(outputFile, seed, max_iterations, burn_in, thinning, X, Y, sigma0, v0E, s02E, v0G, s02G, B);
    return R_NilValue;
END_RCPP
}
// dirichilet_rng
Eigen::VectorXd dirichilet_rng(Eigen::VectorXd alpha);
RcppExport SEXP _BayesRRcpp_dirichilet_rng(SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(dirichilet_rng(alpha));
    return rcpp_result_gen;
END_RCPP
}
// inv_gamma_rng
double inv_gamma_rng(double shape, double scale);
RcppExport SEXP _BayesRRcpp_inv_gamma_rng(SEXP shapeSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_gamma_rng(shape, scale));
    return rcpp_result_gen;
END_RCPP
}
// gamma_rng
double gamma_rng(double shape, double scale);
RcppExport SEXP _BayesRRcpp_gamma_rng(SEXP shapeSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_rng(shape, scale));
    return rcpp_result_gen;
END_RCPP
}
// inv_gamma_rate_rng
double inv_gamma_rate_rng(double shape, double rate);
RcppExport SEXP _BayesRRcpp_inv_gamma_rate_rng(SEXP shapeSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_gamma_rate_rng(shape, rate));
    return rcpp_result_gen;
END_RCPP
}
// gamma_rate_rng
double gamma_rate_rng(double shape, double rate);
RcppExport SEXP _BayesRRcpp_gamma_rate_rng(SEXP shapeSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_rate_rng(shape, rate));
    return rcpp_result_gen;
END_RCPP
}
// inv_scaled_chisq_rng
double inv_scaled_chisq_rng(double dof, double scale);
RcppExport SEXP _BayesRRcpp_inv_scaled_chisq_rng(SEXP dofSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dof(dofSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_scaled_chisq_rng(dof, scale));
    return rcpp_result_gen;
END_RCPP
}
// norm_rng
double norm_rng(double mean, double sigma2);
RcppExport SEXP _BayesRRcpp_norm_rng(SEXP meanSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(norm_rng(mean, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// component_probs
double component_probs(double b2, Eigen::VectorXd pi);
RcppExport SEXP _BayesRRcpp_component_probs(SEXP b2SEXP, SEXP piSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type pi(piSEXP);
    rcpp_result_gen = Rcpp::wrap(component_probs(b2, pi));
    return rcpp_result_gen;
END_RCPP
}
// HorseshoeP
void HorseshoeP(std::string outputFile, int seed, int max_iterations, int burn_in, int thinning, Eigen::MatrixXd X, Eigen::VectorXd Y, double A, double v0E, double s02E, double vL, double vT, int B);
RcppExport SEXP _BayesRRcpp_HorseshoeP(SEXP outputFileSEXP, SEXP seedSEXP, SEXP max_iterationsSEXP, SEXP burn_inSEXP, SEXP thinningSEXP, SEXP XSEXP, SEXP YSEXP, SEXP ASEXP, SEXP v0ESEXP, SEXP s02ESEXP, SEXP vLSEXP, SEXP vTSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type outputFile(outputFileSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type v0E(v0ESEXP);
    Rcpp::traits::input_parameter< double >::type s02E(s02ESEXP);
    Rcpp::traits::input_parameter< double >::type vL(vLSEXP);
    Rcpp::traits::input_parameter< double >::type vT(vTSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    HorseshoeP(outputFile, seed, max_iterations, burn_in, thinning, X, Y, A, v0E, s02E, vL, vT, B);
    return R_NilValue;
END_RCPP
}
// sumDiagonal
Eigen::MatrixXd sumDiagonal(Eigen::MatrixXd Ma, Eigen::VectorXd va);
RcppExport SEXP _BayesRRcpp_sumDiagonal(SEXP MaSEXP, SEXP vaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Ma(MaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type va(vaSEXP);
    rcpp_result_gen = Rcpp::wrap(sumDiagonal(Ma, va));
    return rcpp_result_gen;
END_RCPP
}
// mvn_rng
Eigen::MatrixXd mvn_rng(int nn, const Eigen::MatrixXd mean, const Eigen::MatrixXd covar);
RcppExport SEXP _BayesRRcpp_mvn_rng(SEXP nnSEXP, SEXP meanSEXP, SEXP covarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nn(nnSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type covar(covarSEXP);
    rcpp_result_gen = Rcpp::wrap(mvn_rng(nn, mean, covar));
    return rcpp_result_gen;
END_RCPP
}
// mvnCoef_rng
Eigen::MatrixXd mvnCoef_rng(int nn, const Eigen::MatrixXd xty, const Eigen::MatrixXd xtx, const Eigen::VectorXd d, double sigma);
RcppExport SEXP _BayesRRcpp_mvnCoef_rng(SEXP nnSEXP, SEXP xtySEXP, SEXP xtxSEXP, SEXP dSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nn(nnSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type xty(xtySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type xtx(xtxSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvnCoef_rng(nn, xty, xtx, d, sigma));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesRRcpp_BayesRSamplerSparse", (DL_FUNC) &_BayesRRcpp_BayesRSamplerSparse, 13},
    {"_BayesRRcpp_BayesRSamplerV2", (DL_FUNC) &_BayesRRcpp_BayesRSamplerV2, 13},
    {"_BayesRRcpp_dirichilet_rng", (DL_FUNC) &_BayesRRcpp_dirichilet_rng, 1},
    {"_BayesRRcpp_inv_gamma_rng", (DL_FUNC) &_BayesRRcpp_inv_gamma_rng, 2},
    {"_BayesRRcpp_gamma_rng", (DL_FUNC) &_BayesRRcpp_gamma_rng, 2},
    {"_BayesRRcpp_inv_gamma_rate_rng", (DL_FUNC) &_BayesRRcpp_inv_gamma_rate_rng, 2},
    {"_BayesRRcpp_gamma_rate_rng", (DL_FUNC) &_BayesRRcpp_gamma_rate_rng, 2},
    {"_BayesRRcpp_inv_scaled_chisq_rng", (DL_FUNC) &_BayesRRcpp_inv_scaled_chisq_rng, 2},
    {"_BayesRRcpp_norm_rng", (DL_FUNC) &_BayesRRcpp_norm_rng, 2},
    {"_BayesRRcpp_component_probs", (DL_FUNC) &_BayesRRcpp_component_probs, 2},
    {"_BayesRRcpp_HorseshoeP", (DL_FUNC) &_BayesRRcpp_HorseshoeP, 13},
    {"_BayesRRcpp_sumDiagonal", (DL_FUNC) &_BayesRRcpp_sumDiagonal, 2},
    {"_BayesRRcpp_mvn_rng", (DL_FUNC) &_BayesRRcpp_mvn_rng, 3},
    {"_BayesRRcpp_mvnCoef_rng", (DL_FUNC) &_BayesRRcpp_mvnCoef_rng, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesRRcpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
