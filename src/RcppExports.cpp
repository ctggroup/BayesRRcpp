// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// BayesRSamplerL
Rcpp::List BayesRSamplerL(int seed, int max_iterations, int burn_in, int thinning, Eigen::MatrixXd X, Eigen::MatrixXd Y, double v0, double s02, double a1, double a2);
RcppExport SEXP _BayesRRcpp_BayesRSamplerL(SEXP seedSEXP, SEXP max_iterationsSEXP, SEXP burn_inSEXP, SEXP thinningSEXP, SEXP XSEXP, SEXP YSEXP, SEXP v0SEXP, SEXP s02SEXP, SEXP a1SEXP, SEXP a2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< double >::type s02(s02SEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    rcpp_result_gen = Rcpp::wrap(BayesRSamplerL(seed, max_iterations, burn_in, thinning, X, Y, v0, s02, a1, a2));
    return rcpp_result_gen;
END_RCPP
}
// BayesRSamplerM
Rcpp::List BayesRSamplerM(int seed, int max_iterations, int burn_in, int thinning, Eigen::MatrixXd X, Eigen::MatrixXd Y, double v0, double s02);
RcppExport SEXP _BayesRRcpp_BayesRSamplerM(SEXP seedSEXP, SEXP max_iterationsSEXP, SEXP burn_inSEXP, SEXP thinningSEXP, SEXP XSEXP, SEXP YSEXP, SEXP v0SEXP, SEXP s02SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< double >::type s02(s02SEXP);
    rcpp_result_gen = Rcpp::wrap(BayesRSamplerM(seed, max_iterations, burn_in, thinning, X, Y, v0, s02));
    return rcpp_result_gen;
END_RCPP
}
// BayesRSampler
Rcpp::List BayesRSampler(int seed, int max_iterations, int burn_in, int thinning, Eigen::MatrixXd X, Eigen::VectorXd Y, double v0, double s02, int B);
RcppExport SEXP _BayesRRcpp_BayesRSampler(SEXP seedSEXP, SEXP max_iterationsSEXP, SEXP burn_inSEXP, SEXP thinningSEXP, SEXP XSEXP, SEXP YSEXP, SEXP v0SEXP, SEXP s02SEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< double >::type s02(s02SEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(BayesRSampler(seed, max_iterations, burn_in, thinning, X, Y, v0, s02, B));
    return rcpp_result_gen;
END_RCPP
}
// cotMAt
int cotMAt();
RcppExport SEXP _BayesRRcpp_cotMAt() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cotMAt());
    return rcpp_result_gen;
END_RCPP
}
// dirichilet_rng
Eigen::VectorXd dirichilet_rng(Eigen::VectorXd alpha);
RcppExport SEXP _BayesRRcpp_dirichilet_rng(SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(dirichilet_rng(alpha));
    return rcpp_result_gen;
END_RCPP
}
// inv_gamma_rng
double inv_gamma_rng(double shape, double scale);
RcppExport SEXP _BayesRRcpp_inv_gamma_rng(SEXP shapeSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_gamma_rng(shape, scale));
    return rcpp_result_gen;
END_RCPP
}
// inv_scaled_chisq_rng
double inv_scaled_chisq_rng(double dof, double scale);
RcppExport SEXP _BayesRRcpp_inv_scaled_chisq_rng(SEXP dofSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dof(dofSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_scaled_chisq_rng(dof, scale));
    return rcpp_result_gen;
END_RCPP
}
// norm_rng
double norm_rng(double mean, double sigma2);
RcppExport SEXP _BayesRRcpp_norm_rng(SEXP meanSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(norm_rng(mean, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// component_probs
double component_probs(double b, Eigen::VectorXd pi, double sigmaG);
RcppExport SEXP _BayesRRcpp_component_probs(SEXP bSEXP, SEXP piSEXP, SEXP sigmaGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type pi(piSEXP);
    Rcpp::traits::input_parameter< double >::type sigmaG(sigmaGSEXP);
    rcpp_result_gen = Rcpp::wrap(component_probs(b, pi, sigmaG));
    return rcpp_result_gen;
END_RCPP
}
// spike_slab_rng
double spike_slab_rng(double w, double lambda, double sigmaS);
RcppExport SEXP _BayesRRcpp_spike_slab_rng(SEXP wSEXP, SEXP lambdaSEXP, SEXP sigmaSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type sigmaS(sigmaSSEXP);
    rcpp_result_gen = Rcpp::wrap(spike_slab_rng(w, lambda, sigmaS));
    return rcpp_result_gen;
END_RCPP
}
// sumDiagonal
Eigen::MatrixXd sumDiagonal(Eigen::MatrixXd Ma, Eigen::VectorXd va);
RcppExport SEXP _BayesRRcpp_sumDiagonal(SEXP MaSEXP, SEXP vaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Ma(MaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type va(vaSEXP);
    rcpp_result_gen = Rcpp::wrap(sumDiagonal(Ma, va));
    return rcpp_result_gen;
END_RCPP
}
// mvn_rng
Eigen::MatrixXd mvn_rng(int nn, const Eigen::MatrixXd mean, const Eigen::MatrixXd covar);
RcppExport SEXP _BayesRRcpp_mvn_rng(SEXP nnSEXP, SEXP meanSEXP, SEXP covarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nn(nnSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type covar(covarSEXP);
    rcpp_result_gen = Rcpp::wrap(mvn_rng(nn, mean, covar));
    return rcpp_result_gen;
END_RCPP
}
// mvnCoef_rng
Eigen::MatrixXd mvnCoef_rng(int nn, const Eigen::MatrixXd xty, const Eigen::MatrixXd xtx, const Eigen::VectorXd d);
RcppExport SEXP _BayesRRcpp_mvnCoef_rng(SEXP nnSEXP, SEXP xtySEXP, SEXP xtxSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nn(nnSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type xty(xtySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type xtx(xtxSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(mvnCoef_rng(nn, xty, xtx, d));
    return rcpp_result_gen;
END_RCPP
}
// mvnCoef_rngAug
Eigen::MatrixXd mvnCoef_rngAug(int nn, const Eigen::MatrixXd y, const Eigen::MatrixXd x, const Eigen::VectorXd d);
RcppExport SEXP _BayesRRcpp_mvnCoef_rngAug(SEXP nnSEXP, SEXP ySEXP, SEXP xSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nn(nnSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(mvnCoef_rngAug(nn, y, x, d));
    return rcpp_result_gen;
END_RCPP
}
// slicingTest
void slicingTest(int M, int B);
RcppExport SEXP _BayesRRcpp_slicingTest(SEXP MSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    slicingTest(M, B);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesRRcpp_BayesRSamplerL", (DL_FUNC) &_BayesRRcpp_BayesRSamplerL, 10},
    {"_BayesRRcpp_BayesRSamplerM", (DL_FUNC) &_BayesRRcpp_BayesRSamplerM, 8},
    {"_BayesRRcpp_BayesRSampler", (DL_FUNC) &_BayesRRcpp_BayesRSampler, 9},
    {"_BayesRRcpp_cotMAt", (DL_FUNC) &_BayesRRcpp_cotMAt, 0},
    {"_BayesRRcpp_dirichilet_rng", (DL_FUNC) &_BayesRRcpp_dirichilet_rng, 1},
    {"_BayesRRcpp_inv_gamma_rng", (DL_FUNC) &_BayesRRcpp_inv_gamma_rng, 2},
    {"_BayesRRcpp_inv_scaled_chisq_rng", (DL_FUNC) &_BayesRRcpp_inv_scaled_chisq_rng, 2},
    {"_BayesRRcpp_norm_rng", (DL_FUNC) &_BayesRRcpp_norm_rng, 2},
    {"_BayesRRcpp_component_probs", (DL_FUNC) &_BayesRRcpp_component_probs, 3},
    {"_BayesRRcpp_spike_slab_rng", (DL_FUNC) &_BayesRRcpp_spike_slab_rng, 3},
    {"_BayesRRcpp_sumDiagonal", (DL_FUNC) &_BayesRRcpp_sumDiagonal, 2},
    {"_BayesRRcpp_mvn_rng", (DL_FUNC) &_BayesRRcpp_mvn_rng, 3},
    {"_BayesRRcpp_mvnCoef_rng", (DL_FUNC) &_BayesRRcpp_mvnCoef_rng, 4},
    {"_BayesRRcpp_mvnCoef_rngAug", (DL_FUNC) &_BayesRRcpp_mvnCoef_rngAug, 4},
    {"_BayesRRcpp_slicingTest", (DL_FUNC) &_BayesRRcpp_slicingTest, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesRRcpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
